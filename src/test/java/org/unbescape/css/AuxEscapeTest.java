/*
 * =============================================================================
 * 
 *   Copyright (c) 2014, The UNBESCAPE team (http://www.unbescape.org)
 * 
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 * 
 * =============================================================================
 */
package org.unbescape.css;

import org.junit.Assert;
import org.junit.Test;

/**
 * 
 * @author Daniel Fern&aacute;ndez
 * 
 * @since 1.0
 *
 */
public class AuxEscapeTest {







    @Test
    public void testToCompactHexa() throws Exception {

        {
            final String hexa =
                    "0 1 2 3 4 5 6 7 8 9 A B C D E F 10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F 20 21 22 23 24 25 26 27 28 29 2A 2B 2C 2D 2E 2F 30 31 32 33 34 35 36 37 38 39 3A 3B 3C 3D 3E 3F 40 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E 4F 50 51 52 53 54 55 56 57 58 59 5A 5B 5C 5D 5E 5F 60 61 62 63 64 65 66 67 68 69 6A 6B 6C 6D 6E 6F 70 71 72 73 74 75 76 77 78 79 7A 7B 7C 7D 7E 7F 80 81 82 83 84 85 86 87 88 89 8A 8B 8C 8D 8E 8F 90 91 92 93 94 95 96 97 98 99 9A 9B 9C 9D 9E 9F A0 A1 A2 A3 A4 A5 A6 A7 A8 A9 AA AB AC AD AE AF B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA BB BC BD BE BF C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF D0 D1 D2 D3 D4 D5 D6 D7 D8 D9 DA DB DC DD DE DF E0 E1 E2 E3 E4 E5 E6 E7 E8 E9 EA EB EC ED EE EF F0 F1 F2 F3 F4 F5 F6 F7 F8 F9 FA FB FC FD FE FF 100 101 102 103 104 105 106 107 108 109 10A 10B 10C 10D 10E 10F 110 111 112 113 114 115 116 117 118 119 11A 11B 11C 11D 11E 11F 120 121 122 123 124 125 126 127 128 129 12A 12B 12C 12D 12E 12F 130 131 132 133 134 135 136 137 138 139 13A 13B 13C 13D 13E 13F 140 141 142 143 144 145 146 147 148 149 14A 14B 14C 14D 14E 14F 150 151 152 153 154 155 156 157 158 159 15A 15B 15C 15D 15E 15F 160 161 162 163 164 165 166 167 168 169 16A 16B 16C 16D 16E 16F 170 171 172 173 174 175 176 177 178 179 17A 17B 17C 17D 17E 17F 180 181 182 183 184 185 186 187 188 189 18A 18B 18C 18D 18E 18F 190 191 192 193 194 195 196 197 198 199 19A 19B 19C 19D 19E 19F 1A0 1A1 1A2 1A3 1A4 1A5 1A6 1A7 1A8 1A9 1AA 1AB 1AC 1AD 1AE 1AF 1B0 1B1 1B2 1B3 1B4 1B5 1B6 1B7 1B8 1B9 1BA 1BB 1BC 1BD 1BE 1BF 1C0 1C1 1C2 1C3 1C4 1C5 1C6 1C7 1C8 1C9 1CA 1CB 1CC 1CD 1CE 1CF 1D0 1D1 1D2 1D3 1D4 1D5 1D6 1D7 1D8 1D9 1DA 1DB 1DC 1DD 1DE 1DF 1E0 1E1 1E2 1E3 1E4 1E5 1E6 1E7 1E8 1E9 1EA 1EB 1EC 1ED 1EE 1EF 1F0 1F1 1F2 1F3 1F4 1F5 1F6 1F7 1F8 1F9 1FA 1FB 1FC 1FD 1FE 1FF 200 201 202 203 204 205 206 207 208 209 20A 20B 20C 20D 20E 20F 210 211 212 213 214 215 216 217 218 219 21A 21B 21C 21D 21E 21F 220 221 222 223 224 225 226 227 228 229 22A 22B 22C 22D 22E 22F 230 231 232 233 234 235 236 237 238 239 23A 23B 23C 23D 23E 23F 240 241 242 243 244 245 246 247 248 249 24A 24B 24C 24D 24E 24F 250 251 252 253 254 255 256 257 258 259 25A 25B 25C 25D 25E 25F 260 261 262 263 264 265 266 267 268 269 26A 26B 26C 26D 26E 26F 270 271 272 273 274 275 276 277 278 279 27A 27B 27C 27D 27E 27F 280 281 282 283 284 285 286 287 288 289 28A 28B 28C 28D 28E 28F 290 291 292 293 294 295 296 297 298 299 29A 29B 29C 29D 29E 29F 2A0 2A1 2A2 2A3 2A4 2A5 2A6 2A7 2A8 2A9 2AA 2AB 2AC 2AD 2AE 2AF 2B0 2B1 2B2 2B3 2B4 2B5 2B6 2B7 2B8 2B9 2BA 2BB 2BC 2BD 2BE 2BF 2C0 2C1 2C2 2C3 2C4 2C5 2C6 2C7 2C8 2C9 2CA 2CB 2CC 2CD 2CE 2CF 2D0 2D1 2D2 2D3 2D4 2D5 2D6 2D7 2D8 2D9 2DA 2DB 2DC 2DD 2DE 2DF 2E0 2E1 2E2 2E3 2E4 2E5 2E6 2E7 2E8 2E9 2EA 2EB 2EC 2ED 2EE 2EF 2F0 2F1 2F2 2F3 2F4 2F5 2F6 2F7 2F8 2F9 2FA 2FB 2FC 2FD 2FE 2FF ";

            final StringBuilder strBuilder = new StringBuilder();
            for (int i = 0; i <= 0x02FF; i++) {
                strBuilder.append(CSSIdentifierEscapeUtil.toCompactHexa(i));
            }

            final String result = strBuilder.toString();
            Assert.assertEquals(hexa, result);
        }

        {
            final String hexa =
                    "FE00 FE01 FE02 FE03 FE04 FE05 FE06 FE07 FE08 FE09 FE0A FE0B FE0C FE0D FE0E FE0F FE10 FE11 FE12 FE13 FE14 FE15 FE16 FE17 FE18 FE19 FE1A FE1B FE1C FE1D FE1E FE1F FE20 FE21 FE22 FE23 FE24 FE25 FE26 FE27 FE28 FE29 FE2A FE2B FE2C FE2D FE2E FE2F FE30 FE31 FE32 FE33 FE34 FE35 FE36 FE37 FE38 FE39 FE3A FE3B FE3C FE3D FE3E FE3F FE40 FE41 FE42 FE43 FE44 FE45 FE46 FE47 FE48 FE49 FE4A FE4B FE4C FE4D FE4E FE4F FE50 FE51 FE52 FE53 FE54 FE55 FE56 FE57 FE58 FE59 FE5A FE5B FE5C FE5D FE5E FE5F FE60 FE61 FE62 FE63 FE64 FE65 FE66 FE67 FE68 FE69 FE6A FE6B FE6C FE6D FE6E FE6F FE70 FE71 FE72 FE73 FE74 FE75 FE76 FE77 FE78 FE79 FE7A FE7B FE7C FE7D FE7E FE7F FE80 FE81 FE82 FE83 FE84 FE85 FE86 FE87 FE88 FE89 FE8A FE8B FE8C FE8D FE8E FE8F FE90 FE91 FE92 FE93 FE94 FE95 FE96 FE97 FE98 FE99 FE9A FE9B FE9C FE9D FE9E FE9F FEA0 FEA1 FEA2 FEA3 FEA4 FEA5 FEA6 FEA7 FEA8 FEA9 FEAA FEAB FEAC FEAD FEAE FEAF FEB0 FEB1 FEB2 FEB3 FEB4 FEB5 FEB6 FEB7 FEB8 FEB9 FEBA FEBB FEBC FEBD FEBE FEBF FEC0 FEC1 FEC2 FEC3 FEC4 FEC5 FEC6 FEC7 FEC8 FEC9 FECA FECB FECC FECD FECE FECF FED0 FED1 FED2 FED3 FED4 FED5 FED6 FED7 FED8 FED9 FEDA FEDB FEDC FEDD FEDE FEDF FEE0 FEE1 FEE2 FEE3 FEE4 FEE5 FEE6 FEE7 FEE8 FEE9 FEEA FEEB FEEC FEED FEEE FEEF FEF0 FEF1 FEF2 FEF3 FEF4 FEF5 FEF6 FEF7 FEF8 FEF9 FEFA FEFB FEFC FEFD FEFE FEFF FF00 FF01 FF02 FF03 FF04 FF05 FF06 FF07 FF08 FF09 FF0A FF0B FF0C FF0D FF0E FF0F FF10 FF11 FF12 FF13 FF14 FF15 FF16 FF17 FF18 FF19 FF1A FF1B FF1C FF1D FF1E FF1F FF20 FF21 FF22 FF23 FF24 FF25 FF26 FF27 FF28 FF29 FF2A FF2B FF2C FF2D FF2E FF2F FF30 FF31 FF32 FF33 FF34 FF35 FF36 FF37 FF38 FF39 FF3A FF3B FF3C FF3D FF3E FF3F FF40 FF41 FF42 FF43 FF44 FF45 FF46 FF47 FF48 FF49 FF4A FF4B FF4C FF4D FF4E FF4F FF50 FF51 FF52 FF53 FF54 FF55 FF56 FF57 FF58 FF59 FF5A FF5B FF5C FF5D FF5E FF5F FF60 FF61 FF62 FF63 FF64 FF65 FF66 FF67 FF68 FF69 FF6A FF6B FF6C FF6D FF6E FF6F FF70 FF71 FF72 FF73 FF74 FF75 FF76 FF77 FF78 FF79 FF7A FF7B FF7C FF7D FF7E FF7F FF80 FF81 FF82 FF83 FF84 FF85 FF86 FF87 FF88 FF89 FF8A FF8B FF8C FF8D FF8E FF8F FF90 FF91 FF92 FF93 FF94 FF95 FF96 FF97 FF98 FF99 FF9A FF9B FF9C FF9D FF9E FF9F FFA0 FFA1 FFA2 FFA3 FFA4 FFA5 FFA6 FFA7 FFA8 FFA9 FFAA FFAB FFAC FFAD FFAE FFAF FFB0 FFB1 FFB2 FFB3 FFB4 FFB5 FFB6 FFB7 FFB8 FFB9 FFBA FFBB FFBC FFBD FFBE FFBF FFC0 FFC1 FFC2 FFC3 FFC4 FFC5 FFC6 FFC7 FFC8 FFC9 FFCA FFCB FFCC FFCD FFCE FFCF FFD0 FFD1 FFD2 FFD3 FFD4 FFD5 FFD6 FFD7 FFD8 FFD9 FFDA FFDB FFDC FFDD FFDE FFDF FFE0 FFE1 FFE2 FFE3 FFE4 FFE5 FFE6 FFE7 FFE8 FFE9 FFEA FFEB FFEC FFED FFEE FFEF FFF0 FFF1 FFF2 FFF3 FFF4 FFF5 FFF6 FFF7 FFF8 FFF9 FFFA FFFB FFFC FFFD FFFE FFFF ";

            final StringBuilder strBuilder = new StringBuilder();
            for (int i = 0xFE00; i <= 0xFFFF; i++) {
                strBuilder.append(CSSIdentifierEscapeUtil.toCompactHexa(i));
            }

            final String result = strBuilder.toString();
            Assert.assertEquals(hexa, result);
        }

        {
            final String hexa =
                    "FFE00 FFE01 FFE02 FFE03 FFE04 FFE05 FFE06 FFE07 FFE08 FFE09 FFE0A FFE0B FFE0C FFE0D FFE0E FFE0F FFE10 FFE11 FFE12 FFE13 FFE14 FFE15 FFE16 FFE17 FFE18 FFE19 FFE1A FFE1B FFE1C FFE1D FFE1E FFE1F FFE20 FFE21 FFE22 FFE23 FFE24 FFE25 FFE26 FFE27 FFE28 FFE29 FFE2A FFE2B FFE2C FFE2D FFE2E FFE2F FFE30 FFE31 FFE32 FFE33 FFE34 FFE35 FFE36 FFE37 FFE38 FFE39 FFE3A FFE3B FFE3C FFE3D FFE3E FFE3F FFE40 FFE41 FFE42 FFE43 FFE44 FFE45 FFE46 FFE47 FFE48 FFE49 FFE4A FFE4B FFE4C FFE4D FFE4E FFE4F FFE50 FFE51 FFE52 FFE53 FFE54 FFE55 FFE56 FFE57 FFE58 FFE59 FFE5A FFE5B FFE5C FFE5D FFE5E FFE5F FFE60 FFE61 FFE62 FFE63 FFE64 FFE65 FFE66 FFE67 FFE68 FFE69 FFE6A FFE6B FFE6C FFE6D FFE6E FFE6F FFE70 FFE71 FFE72 FFE73 FFE74 FFE75 FFE76 FFE77 FFE78 FFE79 FFE7A FFE7B FFE7C FFE7D FFE7E FFE7F FFE80 FFE81 FFE82 FFE83 FFE84 FFE85 FFE86 FFE87 FFE88 FFE89 FFE8A FFE8B FFE8C FFE8D FFE8E FFE8F FFE90 FFE91 FFE92 FFE93 FFE94 FFE95 FFE96 FFE97 FFE98 FFE99 FFE9A FFE9B FFE9C FFE9D FFE9E FFE9F FFEA0 FFEA1 FFEA2 FFEA3 FFEA4 FFEA5 FFEA6 FFEA7 FFEA8 FFEA9 FFEAA FFEAB FFEAC FFEAD FFEAE FFEAF FFEB0 FFEB1 FFEB2 FFEB3 FFEB4 FFEB5 FFEB6 FFEB7 FFEB8 FFEB9 FFEBA FFEBB FFEBC FFEBD FFEBE FFEBF FFEC0 FFEC1 FFEC2 FFEC3 FFEC4 FFEC5 FFEC6 FFEC7 FFEC8 FFEC9 FFECA FFECB FFECC FFECD FFECE FFECF FFED0 FFED1 FFED2 FFED3 FFED4 FFED5 FFED6 FFED7 FFED8 FFED9 FFEDA FFEDB FFEDC FFEDD FFEDE FFEDF FFEE0 FFEE1 FFEE2 FFEE3 FFEE4 FFEE5 FFEE6 FFEE7 FFEE8 FFEE9 FFEEA FFEEB FFEEC FFEED FFEEE FFEEF FFEF0 FFEF1 FFEF2 FFEF3 FFEF4 FFEF5 FFEF6 FFEF7 FFEF8 FFEF9 FFEFA FFEFB FFEFC FFEFD FFEFE FFEFF FFF00 FFF01 FFF02 FFF03 FFF04 FFF05 FFF06 FFF07 FFF08 FFF09 FFF0A FFF0B FFF0C FFF0D FFF0E FFF0F FFF10 FFF11 FFF12 FFF13 FFF14 FFF15 FFF16 FFF17 FFF18 FFF19 FFF1A FFF1B FFF1C FFF1D FFF1E FFF1F FFF20 FFF21 FFF22 FFF23 FFF24 FFF25 FFF26 FFF27 FFF28 FFF29 FFF2A FFF2B FFF2C FFF2D FFF2E FFF2F FFF30 FFF31 FFF32 FFF33 FFF34 FFF35 FFF36 FFF37 FFF38 FFF39 FFF3A FFF3B FFF3C FFF3D FFF3E FFF3F FFF40 FFF41 FFF42 FFF43 FFF44 FFF45 FFF46 FFF47 FFF48 FFF49 FFF4A FFF4B FFF4C FFF4D FFF4E FFF4F FFF50 FFF51 FFF52 FFF53 FFF54 FFF55 FFF56 FFF57 FFF58 FFF59 FFF5A FFF5B FFF5C FFF5D FFF5E FFF5F FFF60 FFF61 FFF62 FFF63 FFF64 FFF65 FFF66 FFF67 FFF68 FFF69 FFF6A FFF6B FFF6C FFF6D FFF6E FFF6F FFF70 FFF71 FFF72 FFF73 FFF74 FFF75 FFF76 FFF77 FFF78 FFF79 FFF7A FFF7B FFF7C FFF7D FFF7E FFF7F FFF80 FFF81 FFF82 FFF83 FFF84 FFF85 FFF86 FFF87 FFF88 FFF89 FFF8A FFF8B FFF8C FFF8D FFF8E FFF8F FFF90 FFF91 FFF92 FFF93 FFF94 FFF95 FFF96 FFF97 FFF98 FFF99 FFF9A FFF9B FFF9C FFF9D FFF9E FFF9F FFFA0 FFFA1 FFFA2 FFFA3 FFFA4 FFFA5 FFFA6 FFFA7 FFFA8 FFFA9 FFFAA FFFAB FFFAC FFFAD FFFAE FFFAF FFFB0 FFFB1 FFFB2 FFFB3 FFFB4 FFFB5 FFFB6 FFFB7 FFFB8 FFFB9 FFFBA FFFBB FFFBC FFFBD FFFBE FFFBF FFFC0 FFFC1 FFFC2 FFFC3 FFFC4 FFFC5 FFFC6 FFFC7 FFFC8 FFFC9 FFFCA FFFCB FFFCC FFFCD FFFCE FFFCF FFFD0 FFFD1 FFFD2 FFFD3 FFFD4 FFFD5 FFFD6 FFFD7 FFFD8 FFFD9 FFFDA FFFDB FFFDC FFFDD FFFDE FFFDF FFFE0 FFFE1 FFFE2 FFFE3 FFFE4 FFFE5 FFFE6 FFFE7 FFFE8 FFFE9 FFFEA FFFEB FFFEC FFFED FFFEE FFFEF FFFF0 FFFF1 FFFF2 FFFF3 FFFF4 FFFF5 FFFF6 FFFF7 FFFF8 FFFF9 FFFFA FFFFB FFFFC FFFFD FFFFE FFFFF 10000010000110000210000310000410000510000610000710000810000910000A10000B10000C10000D10000E10000F10001010001110001210001310001410001510001610001710001810001910001A10001B10001C10001D10001E10001F100020";

            final StringBuilder strBuilder = new StringBuilder();
            for (int i = 0xFFE00; i <= 0x100020; i++) {
                strBuilder.append(CSSIdentifierEscapeUtil.toCompactHexa(i));
            }

            final String result = strBuilder.toString();
            Assert.assertEquals(hexa, result);
        }

        {
            final String hexa =


            final StringBuilder strBuilder = new StringBuilder();
            for (int i = 0x10FE00; i <= 0x10FFFF; i++) {
                strBuilder.append(CSSIdentifierEscapeUtil.toCompactHexa(i));
            }

            final String result = strBuilder.toString();
            Assert.assertEquals(hexa, result);
        }

    }



    @Test
    public void testToSixDigitHexa() throws Exception {

        {
            final String hexa =


            final StringBuilder strBuilder = new StringBuilder();
            for (int i = 0; i <= 0x02FF; i++) {
                strBuilder.append(CSSIdentifierEscapeUtil.toSixDigitHexa(i));
            }

            final String result = strBuilder.toString();
            Assert.assertEquals(hexa, result);
        }

        {
            final String hexa =
                    "00FE0000FE0100FE0200FE0300FE0400FE0500FE0600FE0700FE0800FE0900FE0A00FE0B00FE0C00FE0D00FE0E00FE0F00FE1000FE1100FE1200FE1300FE1400FE1500FE1600FE1700FE1800FE1900FE1A00FE1B00FE1C00FE1D00FE1E00FE1F00FE2000FE2100FE2200FE2300FE2400FE2500FE2600FE2700FE2800FE2900FE2A00FE2B00FE2C00FE2D00FE2E00FE2F00FE3000FE3100FE3200FE3300FE3400FE3500FE3600FE3700FE3800FE3900FE3A00FE3B00FE3C00FE3D00FE3E00FE3F00FE4000FE4100FE4200FE4300FE4400FE4500FE4600FE4700FE4800FE4900FE4A00FE4B00FE4C00FE4D00FE4E00FE4F00FE5000FE5100FE5200FE5300FE5400FE5500FE5600FE5700FE5800FE5900FE5A00FE5B00FE5C00FE5D00FE5E00FE5F00FE6000FE6100FE6200FE6300FE6400FE6500FE6600FE6700FE6800FE6900FE6A00FE6B00FE6C00FE6D00FE6E00FE6F00FE7000FE7100FE7200FE7300FE7400FE7500FE7600FE7700FE7800FE7900FE7A00FE7B00FE7C00FE7D00FE7E00FE7F00FE8000FE8100FE8200FE8300FE8400FE8500FE8600FE8700FE8800FE8900FE8A00FE8B00FE8C00FE8D00FE8E00FE8F00FE9000FE9100FE9200FE9300FE9400FE9500FE9600FE9700FE9800FE9900FE9A00FE9B00FE9C00FE9D00FE9E00FE9F00FEA000FEA100FEA200FEA300FEA400FEA500FEA600FEA700FEA800FEA900FEAA00FEAB00FEAC00FEAD00FEAE00FEAF00FEB000FEB100FEB200FEB300FEB400FEB500FEB600FEB700FEB800FEB900FEBA00FEBB00FEBC00FEBD00FEBE00FEBF00FEC000FEC100FEC200FEC300FEC400FEC500FEC600FEC700FEC800FEC900FECA00FECB00FECC00FECD00FECE00FECF00FED000FED100FED200FED300FED400FED500FED600FED700FED800FED900FEDA00FEDB00FEDC00FEDD00FEDE00FEDF00FEE000FEE100FEE200FEE300FEE400FEE500FEE600FEE700FEE800FEE900FEEA00FEEB00FEEC00FEED00FEEE00FEEF00FEF000FEF100FEF200FEF300FEF400FEF500FEF600FEF700FEF800FEF900FEFA00FEFB00FEFC00FEFD00FEFE00FEFF00FF0000FF0100FF0200FF0300FF0400FF0500FF0600FF0700FF0800FF0900FF0A00FF0B00FF0C00FF0D00FF0E00FF0F00FF1000FF1100FF1200FF1300FF1400FF1500FF1600FF1700FF1800FF1900FF1A00FF1B00FF1C00FF1D00FF1E00FF1F00FF2000FF2100FF2200FF2300FF2400FF2500FF2600FF2700FF2800FF2900FF2A00FF2B00FF2C00FF2D00FF2E00FF2F00FF3000FF3100FF3200FF3300FF3400FF3500FF3600FF3700FF3800FF3900FF3A00FF3B00FF3C00FF3D00FF3E00FF3F00FF4000FF4100FF4200FF4300FF4400FF4500FF4600FF4700FF4800FF4900FF4A00FF4B00FF4C00FF4D00FF4E00FF4F00FF5000FF5100FF5200FF5300FF5400FF5500FF5600FF5700FF5800FF5900FF5A00FF5B00FF5C00FF5D00FF5E00FF5F00FF6000FF6100FF6200FF6300FF6400FF6500FF6600FF6700FF6800FF6900FF6A00FF6B00FF6C00FF6D00FF6E00FF6F00FF7000FF7100FF7200FF7300FF7400FF7500FF7600FF7700FF7800FF7900FF7A00FF7B00FF7C00FF7D00FF7E00FF7F00FF8000FF8100FF8200FF8300FF8400FF8500FF8600FF8700FF8800FF8900FF8A00FF8B00FF8C00FF8D00FF8E00FF8F00FF9000FF9100FF9200FF9300FF9400FF9500FF9600FF9700FF9800FF9900FF9A00FF9B00FF9C00FF9D00FF9E00FF9F00FFA000FFA100FFA200FFA300FFA400FFA500FFA600FFA700FFA800FFA900FFAA00FFAB00FFAC00FFAD00FFAE00FFAF00FFB000FFB100FFB200FFB300FFB400FFB500FFB600FFB700FFB800FFB900FFBA00FFBB00FFBC00FFBD00FFBE00FFBF00FFC000FFC100FFC200FFC300FFC400FFC500FFC600FFC700FFC800FFC900FFCA00FFCB00FFCC00FFCD00FFCE00FFCF00FFD000FFD100FFD200FFD300FFD400FFD500FFD600FFD700FFD800FFD900FFDA00FFDB00FFDC00FFDD00FFDE00FFDF00FFE000FFE100FFE200FFE300FFE400FFE500FFE600FFE700FFE800FFE900FFEA00FFEB00FFEC00FFED00FFEE00FFEF00FFF000FFF100FFF200FFF300FFF400FFF500FFF600FFF700FFF800FFF900FFFA00FFFB00FFFC00FFFD00FFFE00FFFF";

            final StringBuilder strBuilder = new StringBuilder();
            for (int i = 0xFE00; i <= 0xFFFF; i++) {
                strBuilder.append(CSSIdentifierEscapeUtil.toSixDigitHexa(i));
            }

            final String result = strBuilder.toString();
            Assert.assertEquals(hexa, result);
        }

        {
            final String hexa =
                    "0FFE000FFE010FFE020FFE030FFE040FFE050FFE060FFE070FFE080FFE090FFE0A0FFE0B0FFE0C0FFE0D0FFE0E0FFE0F0FFE100FFE110FFE120FFE130FFE140FFE150FFE160FFE170FFE180FFE190FFE1A0FFE1B0FFE1C0FFE1D0FFE1E0FFE1F0FFE200FFE210FFE220FFE230FFE240FFE250FFE260FFE270FFE280FFE290FFE2A0FFE2B0FFE2C0FFE2D0FFE2E0FFE2F0FFE300FFE310FFE320FFE330FFE340FFE350FFE360FFE370FFE380FFE390FFE3A0FFE3B0FFE3C0FFE3D0FFE3E0FFE3F0FFE400FFE410FFE420FFE430FFE440FFE450FFE460FFE470FFE480FFE490FFE4A0FFE4B0FFE4C0FFE4D0FFE4E0FFE4F0FFE500FFE510FFE520FFE530FFE540FFE550FFE560FFE570FFE580FFE590FFE5A0FFE5B0FFE5C0FFE5D0FFE5E0FFE5F0FFE600FFE610FFE620FFE630FFE640FFE650FFE660FFE670FFE680FFE690FFE6A0FFE6B0FFE6C0FFE6D0FFE6E0FFE6F0FFE700FFE710FFE720FFE730FFE740FFE750FFE760FFE770FFE780FFE790FFE7A0FFE7B0FFE7C0FFE7D0FFE7E0FFE7F0FFE800FFE810FFE820FFE830FFE840FFE850FFE860FFE870FFE880FFE890FFE8A0FFE8B0FFE8C0FFE8D0FFE8E0FFE8F0FFE900FFE910FFE920FFE930FFE940FFE950FFE960FFE970FFE980FFE990FFE9A0FFE9B0FFE9C0FFE9D0FFE9E0FFE9F0FFEA00FFEA10FFEA20FFEA30FFEA40FFEA50FFEA60FFEA70FFEA80FFEA90FFEAA0FFEAB0FFEAC0FFEAD0FFEAE0FFEAF0FFEB00FFEB10FFEB20FFEB30FFEB40FFEB50FFEB60FFEB70FFEB80FFEB90FFEBA0FFEBB0FFEBC0FFEBD0FFEBE0FFEBF0FFEC00FFEC10FFEC20FFEC30FFEC40FFEC50FFEC60FFEC70FFEC80FFEC90FFECA0FFECB0FFECC0FFECD0FFECE0FFECF0FFED00FFED10FFED20FFED30FFED40FFED50FFED60FFED70FFED80FFED90FFEDA0FFEDB0FFEDC0FFEDD0FFEDE0FFEDF0FFEE00FFEE10FFEE20FFEE30FFEE40FFEE50FFEE60FFEE70FFEE80FFEE90FFEEA0FFEEB0FFEEC0FFEED0FFEEE0FFEEF0FFEF00FFEF10FFEF20FFEF30FFEF40FFEF50FFEF60FFEF70FFEF80FFEF90FFEFA0FFEFB0FFEFC0FFEFD0FFEFE0FFEFF0FFF000FFF010FFF020FFF030FFF040FFF050FFF060FFF070FFF080FFF090FFF0A0FFF0B0FFF0C0FFF0D0FFF0E0FFF0F0FFF100FFF110FFF120FFF130FFF140FFF150FFF160FFF170FFF180FFF190FFF1A0FFF1B0FFF1C0FFF1D0FFF1E0FFF1F0FFF200FFF210FFF220FFF230FFF240FFF250FFF260FFF270FFF280FFF290FFF2A0FFF2B0FFF2C0FFF2D0FFF2E0FFF2F0FFF300FFF310FFF320FFF330FFF340FFF350FFF360FFF370FFF380FFF390FFF3A0FFF3B0FFF3C0FFF3D0FFF3E0FFF3F0FFF400FFF410FFF420FFF430FFF440FFF450FFF460FFF470FFF480FFF490FFF4A0FFF4B0FFF4C0FFF4D0FFF4E0FFF4F0FFF500FFF510FFF520FFF530FFF540FFF550FFF560FFF570FFF580FFF590FFF5A0FFF5B0FFF5C0FFF5D0FFF5E0FFF5F0FFF600FFF610FFF620FFF630FFF640FFF650FFF660FFF670FFF680FFF690FFF6A0FFF6B0FFF6C0FFF6D0FFF6E0FFF6F0FFF700FFF710FFF720FFF730FFF740FFF750FFF760FFF770FFF780FFF790FFF7A0FFF7B0FFF7C0FFF7D0FFF7E0FFF7F0FFF800FFF810FFF820FFF830FFF840FFF850FFF860FFF870FFF880FFF890FFF8A0FFF8B0FFF8C0FFF8D0FFF8E0FFF8F0FFF900FFF910FFF920FFF930FFF940FFF950FFF960FFF970FFF980FFF990FFF9A0FFF9B0FFF9C0FFF9D0FFF9E0FFF9F0FFFA00FFFA10FFFA20FFFA30FFFA40FFFA50FFFA60FFFA70FFFA80FFFA90FFFAA0FFFAB0FFFAC0FFFAD0FFFAE0FFFAF0FFFB00FFFB10FFFB20FFFB30FFFB40FFFB50FFFB60FFFB70FFFB80FFFB90FFFBA0FFFBB0FFFBC0FFFBD0FFFBE0FFFBF0FFFC00FFFC10FFFC20FFFC30FFFC40FFFC50FFFC60FFFC70FFFC80FFFC90FFFCA0FFFCB0FFFCC0FFFCD0FFFCE0FFFCF0FFFD00FFFD10FFFD20FFFD30FFFD40FFFD50FFFD60FFFD70FFFD80FFFD90FFFDA0FFFDB0FFFDC0FFFDD0FFFDE0FFFDF0FFFE00FFFE10FFFE20FFFE30FFFE40FFFE50FFFE60FFFE70FFFE80FFFE90FFFEA0FFFEB0FFFEC0FFFED0FFFEE0FFFEF0FFFF00FFFF10FFFF20FFFF30FFFF40FFFF50FFFF60FFFF70FFFF80FFFF90FFFFA0FFFFB0FFFFC0FFFFD0FFFFE0FFFFF10000010000110000210000310000410000510000610000710000810000910000A10000B10000C10000D10000E10000F10001010001110001210001310001410001510001610001710001810001910001A10001B10001C10001D10001E10001F100020";

            final StringBuilder strBuilder = new StringBuilder();
            for (int i = 0xFFE00; i <= 0x100020; i++) {
                strBuilder.append(CSSIdentifierEscapeUtil.toSixDigitHexa(i));
            }

            final String result = strBuilder.toString();
            Assert.assertEquals(hexa, result);
        }


        {
            final String hexa =


            final StringBuilder strBuilder = new StringBuilder();
            for (int i = 0x10FE00; i <= 0x10FFFF; i++) {
                strBuilder.append(CSSIdentifierEscapeUtil.toSixDigitHexa(i));
            }

            final String result = strBuilder.toString();
            Assert.assertEquals(hexa, result);
        }

    }



    public AuxEscapeTest() {
        super();
    }


}

